package yuma140902.mcmodlib.event_handlers;

import cpw.mods.fml.common.eventhandler.SubscribeEvent;
import cpw.mods.fml.common.registry.GameData;
import net.minecraft.block.Block;
import net.minecraft.block.material.Material;
import net.minecraft.client.Minecraft;
import net.minecraft.command.server.CommandMessageRaw;
import net.minecraft.init.Blocks;
import net.minecraft.item.ItemStack;
import net.minecraft.server.integrated.IntegratedServer;
import net.minecraft.util.StatCollector;
import net.minecraftforge.event.entity.player.ItemTooltipEvent;
import net.minecraftforge.event.world.WorldEvent;
import net.minecraftforge.oredict.OreDictionary;
import yuma140902.mcmodlib.api.update.IUpdateChecker;
import yuma140902.mcmodlib.api.update.UpdateCheckerRegistry;
import yuma140902.mcmodlib.config.YumaLibConfigCore;

public class ClientEventHandler {
	private ClientEventHandler() {}
	
	public static final ClientEventHandler INSTANCE = new ClientEventHandler();
	
	
	private boolean hasNotifiedAboutUpdate = false;
	
	private void updateNotify(WorldEvent.Load event) {
		if(!event.world.isRemote || hasNotifiedAboutUpdate) {
			return;
		}
		IntegratedServer integratedServer = Minecraft.getMinecraft().getIntegratedServer();
		if(integratedServer == null) {
			return;
		}
		
		for(IUpdateChecker updateChecker : UpdateCheckerRegistry.INSTANCE.list()) {
			if(!updateChecker.hasNewVersionAvailable()) {
				continue;
			}
			String msgRaw = StatCollector.translateToLocalFormatted("text.yumalib.update_notify", updateChecker.getAvailableNewVersion(), updateChecker.getNewVersionUrl());
			new CommandMessageRaw().processCommand(integratedServer, new String[] {"@a", msgRaw});
		}
		
		hasNotifiedAboutUpdate = true;
	}
	
	@SubscribeEvent
	public void onWorldLoaded(WorldEvent.Load event) {
		updateNotify(event);
	}
	
	@SubscribeEvent
	public void onTooltipShown(ItemTooltipEvent event) {
		boolean isInAdvancedMode = event.showAdvancedItemTooltips;
		ItemStack itemstack = event.itemStack;
		
		if(YumaLibConfigCore.Tooltip.showOreDic.toBoolean(isInAdvancedMode)) {
			int[] oreIDs = OreDictionary.getOreIDs(itemstack);
			
			for(int i = 0; i < oreIDs.length; ++i) {
				event.toolTip.add(OreDictionary.getOreName(oreIDs[i]));
			}
		}
		
		if(YumaLibConfigCore.Tooltip.showBlockMaterialInfo.toBoolean(isInAdvancedMode)) {
			Block block = Block.getBlockFromItem(itemstack.getItem());
			if(block != null && block != Blocks.air) {
				Material material = block.getMaterial();
				event.toolTip.add("Material: " + getMaterialName(material));
				String harvestToolInfo = getHarvestTool(block, 0);
				if(harvestToolInfo != null) {
					event.toolTip.add("HarvestTool: " + harvestToolInfo);
				}
				event.toolTip.add("SoundType: " + getStepSoundName(block.stepSound));
			}
		}
		
		if(YumaLibConfigCore.Tooltip.showRegistryName.toBoolean(isInAdvancedMode)) {
			String registyName = GameData.getItemRegistry().getNameForObject(itemstack.getItem());
			event.toolTip.add(registyName);
		}
		
	}
	
	private String getMaterialName(Material material) {
		/* Autogenerated */
		if(material == Material.air) return "air";
		else if(material == Material.grass) return "grass";
		else if(material == Material.ground) return "ground";
		else if(material == Material.wood) return "wood";
		else if(material == Material.rock) return "rock";
		else if(material == Material.iron) return "iron";
		else if(material == Material.anvil) return "anvil";
		else if(material == Material.water) return "water";
		else if(material == Material.lava) return "lava";
		else if(material == Material.leaves) return "leaves";
		else if(material == Material.plants) return "plants";
		else if(material == Material.vine) return "vine";
		else if(material == Material.sponge) return "sponge";
		else if(material == Material.cloth) return "cloth";
		else if(material == Material.fire) return "fire";
		else if(material == Material.sand) return "sand";
		else if(material == Material.circuits) return "circuits";
		else if(material == Material.carpet) return "carpet";
		else if(material == Material.glass) return "glass";
		else if(material == Material.redstoneLight) return "redstoneLight";
		else if(material == Material.tnt) return "tnt";
		else if(material == Material.coral) return "coral";
		else if(material == Material.ice) return "ice";
		else if(material == Material.packedIce) return "packedIce";
		else if(material == Material.snow) return "snow";
		else if(material == Material.craftedSnow) return "craftedSnow";
		else if(material == Material.cactus) return "cactus";
		else if(material == Material.clay) return "clay";
		else if(material == Material.gourd) return "gourd";
		else if(material == Material.dragonEgg) return "dragonEgg";
		else if(material == Material.portal) return "portal";
		else if(material == Material.cake) return "cake";
		else if(material == Material.web) return "web";
		else if(material == Material.piston) return "piston";
		else return "custom";
	}

	private String getStepSoundName(Block.SoundType stepSoundType) {
		if(stepSoundType == Block.soundTypeStone) return "soundTypeStone";
		else if(stepSoundType == Block.soundTypeWood) return "soundTypeWood";
		else if(stepSoundType == Block.soundTypeGravel) return "soundTypeGravel";
		else if(stepSoundType == Block.soundTypeGrass) return "soundTypeGrass";
		else if(stepSoundType == Block.soundTypePiston) return "soundTypePiston";
		else if(stepSoundType == Block.soundTypeMetal) return "soundTypeMetal";
		else if(stepSoundType == Block.soundTypeGlass) return "soundTypeGlass";
		else if(stepSoundType == Block.soundTypeCloth) return "soundTypeCloth";
		else if(stepSoundType == Block.soundTypeSand) return "soundTypeSand";
		else if(stepSoundType == Block.soundTypeSnow) return "soundTypeSnow";
		else if(stepSoundType == Block.soundTypeLadder) return "soundTypeLadder";
		else if(stepSoundType == Block.soundTypeAnvil) return "soundTypeAnvil";
		else return "custom";
	}

	private String getHarvestTool(Block block, int meta) {
		String tool = block.getHarvestTool(meta);
		int level = block.getHarvestLevel(meta);
		if(tool == null) {
			return null;
		}
		return tool + ", level: " + level;
	}
}
