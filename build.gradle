buildscript {
    repositories {
        mavenCentral()
        jcenter()  // needed by com.anatawa12.forge:ForgeGradle
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        //classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
        classpath "com.anatawa12.forge:ForgeGradle:1.2-1.0.1"  // A successor of ForgeGradle 1.2
    }
}

apply plugin: 'forge'

version = "2.3.5"
group= "yuma140902" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "UpToDateMod"

minecraft {
    version = "1.7.10-10.13.4.1558-1.7.10"
    runDir = "eclipse"
}

sourceSets {
    main {
        output.resourcesDir = java.outputDir
    }
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

[compileJava, compileTestJava].each {
    it.options.encoding = 'UTF-8'
    it.options.compilerArgs += ['-source', '1.8', '-target', '1.8']
}

dependencies {
    // for more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html

    // you may put jars on which you depend on in ./libs
    compile fileTree(dir: 'libs', include: '*.jar')
}

jar {
    version = "mc1.7.10-${project.version}"
    manifest {
        attributes(
                "FMLCorePlugin": "yuma140902.yumalib.asm.YLCorePlugin",
                "FMLCorePluginContainsFMLMod": "*")
    }
}

task devJar(type: Jar, dependsOn: 'jar') {
    from sourceSets.main.java.outputDir
    classifier = 'dev'
    version = "mc1.7.10-${project.version}"
}

task srcJar(type: Jar, dependsOn: 'sourceMainJava') {
    from sourceSets.main.allSource
    classifier = 'src'
    version = "mc1.7.10-${project.version}"
}

artifacts {
    archives devJar, srcJar
}

processResources
{
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
                
        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
        
    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}
